{"name":"prideRcompare","tagline":"Compare, distance, and clustering for prideR projects","body":"prideRcompare\r\n=============\r\n\r\nAn `R` package for comparing and clustering [PRIDE Archive](http://www.ebi.ac.uk/pride/archive) \r\nprojects. \r\n\r\nThis package makes use of the [prideR](https://github.com/jadianes/prider) package.  \r\n\r\n### Installation  \r\n\r\nFirst, we need to install `devtools`:  \r\n\r\n    install.packages(\"devtools\")\r\n    library(devtools)\r\n   \r\nThen we just call  \r\n\r\n    install_github(username=\"Bioanalytics\", repo=\"prideRcompare\")\r\n\r\n### Usage  \r\n\r\n#### Archive distance calculators\r\n\r\nThe following code  \r\n\r\n    archive.accession.distance.retriever(\"PXD001034\", project.count=100)\r\n   \r\nReturns the [*Jaccard similarity index*](http://en.wikipedia.org/wiki/Jaccard_index) \r\nbetween the PRIDE Archive project with accession `PXD001034` and the first 100 \r\nprojects returned by the PRIDE Archive web service (that currently are the 100 \r\nmost recent ones).  \r\n\r\nWe can use `ProjectDetail` objects in a similar way.  \r\n\r\n#### Individual distances\r\n\r\nIndividual distances can be calculated using `distance.ProteinDetail` like in  \r\n\r\n    p1034.protein.details <- get.list.ProteinDetail(\"PXD001034\")\r\n    p1156.protein.details <- get.list.ProteinDetail(\"PXD001156\")\r\n    distance.ProteinDetail(p1034.protein.details, p1156.protein.details)\r\n\r\nAlso applicable to lists using the function `distance.list.ProteinDetail` and\r\n`distance.df.ProteinDetail`.  \r\n\r\n#### Clustering  \r\n\r\nWe can cluster lists of `ProteinDetail` and `ProjectSummary` instances, although\r\nin the end the clustering is always done on the protein details and therefore \r\nthe later method uses the former one through the PRIDE Archive web service. In\r\norder to be a good citizen, the recommended usage is through `ProteinDetail` \r\nobtaining first the list of lists of protein details for each project.  \r\n\r\n    cancer.projects.100 <- search.list.ProjectSummary(\"cancer\", 100)\r\n    cancer.projects.100.protein.details.100 <- lapply(cancer.projects.100, function(x) {get.list.ProteinDetail(accession(x), 100)})\r\n    cancer.clusters.100.100 <- cluster.ProteinDetails(cancer.projects.100.protein.details.100)\r\n\r\nThat will give us a hierarchical cluster objects (as generated by `hclust`) that\r\nwe can use to find out clusters (e.g. 5 clusters) using:\r\n\r\n    cancer.projects.100.accessions <- sapply(cancer.projects.100, accession)\r\n    cutree.labels(cancer.clusters.100.100, 5, cancer.projects.100.accessions)\r\n\r\nOr just plot:\r\n\r\n    plot(cancer.clusters.100.100, cancer.projects.100.accessions, main=\"Clustering of latest 100 cancer projects\")\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}